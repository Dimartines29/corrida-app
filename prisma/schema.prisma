generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  resetToken         String?    @unique
  resetTokenExpiry   DateTime?
  accounts      Account[]
  inscricao     Inscricao?
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lote {
  id         String      @id @default(cuid())
  nome       String
  preco      Float
  dataInicio DateTime
  dataFim    DateTime
  ativo      Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  inscricoes Inscricao[]
}

model Inscricao {
  id                 String          @id @default(cuid())
  codigo             Int             @unique
  userId             String          @unique
  categoria          String
  loteId             String
  nomeCompleto       String
  cpf                String          @unique
  rg                 String
  dataNascimento     DateTime
  sexo               String
  telefone           String
  endereco           String
  bairro             String
  cidade             String
  estado             String
  cep                String
  tamanhoCamisa      String
  retiradaKit        String
  possuiPlanoSaude   Boolean
  contatoEmergencia  String
  telefoneEmergencia String
  declaracaoSaude    Boolean
  valorPago          Float
  status             StatusInscricao @default(PENDENTE)
  valeAlmoco         Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  lote               Lote            @relation(fields: [loteId], references: [id])
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pagamento          Pagamento?
}

model Pagamento {
  id              String          @id @default(cuid())
  inscricaoId     String          @unique
  transacaoId     String          @unique
  valor           Float
  status          StatusPagamento @default(PENDENTE)
  metodoPagamento String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  inscricao       Inscricao       @relation(fields: [inscricaoId], references: [id], onDelete: Cascade)
}

model ConfiguracaoSite {
  id                String   @id @default(cuid())
  nomeEvento        String
  dataEvento        DateTime
  localEvento       String
  descricao         String
  regulamento       String
  inscricoesAbertas Boolean  @default(true)
  updatedAt         DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum StatusInscricao {
  PENDENTE
  PAGO
  CANCELADO
}

enum StatusPagamento {
  PENDENTE
  APROVADO
  RECUSADO
  REEMBOLSADO
}
